{
  "stats": {
    "suites": 5,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-22T19:08:37.262Z",
    "end": "2023-04-22T19:10:52.287Z",
    "duration": 135025,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "39796d6a-acb6-47c0-bb8a-c1b8ad3bc930",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
          "title": "Testing add clients, tasks and login to application",
          "fullFile": "C:\\Users\\dawid\\OneDrive\\Desktop\\projekty na gita\\agf-hydra_heroku\\SeleniumADF-Hydra\\test\\automaticTestsAdf-Hydra-1.js",
          "file": "\\test\\automaticTestsAdf-Hydra-1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login to page",
              "fullTitle": "Testing add clients, tasks and login to application Login to page",
              "timedOut": false,
              "duration": 10050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var login = \"dawid15\"\n        var password = \"qwerty\"\n        var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/logowanie');\n        await driver.findElement(By.id(\"login\")).sendKeys(`${login}`)\n        await driver.findElement(By.id(\"password\")).sendKeys(`${password}`, webdriver.Key.RETURN)\n        var body_after_login = await driver.wait(webdriver.until.elementLocated(By.className('a-nav'))).getText().then(function(values){\n            return values\n        })\n        if(body_after_login.should.equal(`${login}`)){\n            console.log('zalogowano sie pomyslnie')\n        }\n        // driver.sleep(5000)\n        await driver.quit()",
              "err": {},
              "uuid": "1901dea6-9dc3-4edc-b630-d052cd637670",
              "parentUUID": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Click buttons Klienci -> Dodaj klienta",
              "fullTitle": "Testing add clients, tasks and login to application Click buttons Klienci -> Dodaj klienta",
              "timedOut": false,
              "duration": 7164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna');\n        await driver.findElement(By.className('customers-button')).click()\n        await driver.wait(webdriver.until.elementLocated(By.className('addCustomers-button'))).click()\n        // driver.sleep(5000)\n        await driver.quit()",
              "err": {},
              "uuid": "89ff2141-494c-474b-a8b7-39cd71ac0a46",
              "parentUUID": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add client: Monika Papiez",
              "fullTitle": "Testing add clients, tasks and login to application Add client: Monika Papiez",
              "timedOut": false,
              "duration": 10491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n                .forBrowser('chrome')\n                .build();\n            await driver.get('http://localhost:3000/strona_glowna/dodaj_klienta');\n            await driver.findElement(By.id('name')).sendKeys(`${nameC}`)\n            await driver.findElement(By.id('lastName')).sendKeys(`${lastName}`)\n            await driver.findElement(By.id('address')).sendKeys(`${address}`)\n            await driver.findElement(By.id('phone')).sendKeys(`${phone}`)\n            await driver.findElement(By.id('nameOfService')).sendKeys(`${nameOfService}`)\n            await driver.findElement(By.id('placeOfAssembly')).sendKeys(`${placeOfAssembly}`)\n            // driver.sleep(2000)\n            await driver.findElement(By.id('dateOfService')).sendKeys(`${dateOfService}`)\n            await driver.findElement(By.id('dateOfService')).sendKeys(webdriver.Key.TAB)\n            await driver.findElement(By.id('dateOfService')).sendKeys(`${dateOfServiceH}`)\n        \n            await driver.findElement(By.id('DateNextInspection')).sendKeys(`${DateNextInspection}`)\n            await driver.findElement(By.className('addClient-button')).click()\n            let nameLastnameAdress = await driver.wait(webdriver.until.elementLocated(By.className('data-client-outside'))).getText().then(function(values){\n                return values\n            })\n            let taskcheck = await driver.wait(webdriver.until.elementLocated(By.className('summary-data'))).getText().then(function(values){\n                return values\n            })\n            let currentURL = await driver.getCurrentUrl().then(function(values){\n                var UrlToString = values.toString()\n                var splitUrl = UrlToString.split('/')\n                var clientID = splitUrl[5]\n                return clientID\n            })\n            addClientsID[loopIteration] = currentURL\n            let taskID = await driver.executeScript(function() {\n                return document.querySelector('.id').textContent\n              }).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n              });\n              firstAddedTasksID[loopIteration] = taskID\n             if(loopIteration == 0){\n                 tasksIDAddedToFirstClient[loopIteration] = taskID\n             }\n            nameLastnameAdress.should.equal(`Dane Klienta:\\nImię: ${nameC}\\nNazwisko: ${lastName}\\nTel: ${phone}\\nE-mail:\\nAdres: ${address}`)\n            var dateOfServiceDifferent = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\n            taskcheck.should.equal(`1. Usługa (1)\\n${dateOfServiceDifferent} | ${dateOfServiceH} Usługa: ${nameOfService} Adres: ${placeOfAssembly}`)\n            loopIteration++\n            // driver.sleep(5000)\n            await driver.quit()",
              "err": {},
              "uuid": "5584a110-52e5-421f-8ba2-97fdbe913b82",
              "parentUUID": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add client: Adam Marzec",
              "fullTitle": "Testing add clients, tasks and login to application Add client: Adam Marzec",
              "timedOut": false,
              "duration": 7655,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n                .forBrowser('chrome')\n                .build();\n            await driver.get('http://localhost:3000/strona_glowna/dodaj_klienta');\n            await driver.findElement(By.id('name')).sendKeys(`${nameC}`)\n            await driver.findElement(By.id('lastName')).sendKeys(`${lastName}`)\n            await driver.findElement(By.id('address')).sendKeys(`${address}`)\n            await driver.findElement(By.id('phone')).sendKeys(`${phone}`)\n            await driver.findElement(By.id('nameOfService')).sendKeys(`${nameOfService}`)\n            await driver.findElement(By.id('placeOfAssembly')).sendKeys(`${placeOfAssembly}`)\n            // driver.sleep(2000)\n            await driver.findElement(By.id('dateOfService')).sendKeys(`${dateOfService}`)\n            await driver.findElement(By.id('dateOfService')).sendKeys(webdriver.Key.TAB)\n            await driver.findElement(By.id('dateOfService')).sendKeys(`${dateOfServiceH}`)\n        \n            await driver.findElement(By.id('DateNextInspection')).sendKeys(`${DateNextInspection}`)\n            await driver.findElement(By.className('addClient-button')).click()\n            let nameLastnameAdress = await driver.wait(webdriver.until.elementLocated(By.className('data-client-outside'))).getText().then(function(values){\n                return values\n            })\n            let taskcheck = await driver.wait(webdriver.until.elementLocated(By.className('summary-data'))).getText().then(function(values){\n                return values\n            })\n            let currentURL = await driver.getCurrentUrl().then(function(values){\n                var UrlToString = values.toString()\n                var splitUrl = UrlToString.split('/')\n                var clientID = splitUrl[5]\n                return clientID\n            })\n            addClientsID[loopIteration] = currentURL\n            let taskID = await driver.executeScript(function() {\n                return document.querySelector('.id').textContent\n              }).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n              });\n              firstAddedTasksID[loopIteration] = taskID\n             if(loopIteration == 0){\n                 tasksIDAddedToFirstClient[loopIteration] = taskID\n             }\n            nameLastnameAdress.should.equal(`Dane Klienta:\\nImię: ${nameC}\\nNazwisko: ${lastName}\\nTel: ${phone}\\nE-mail:\\nAdres: ${address}`)\n            var dateOfServiceDifferent = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\n            taskcheck.should.equal(`1. Usługa (1)\\n${dateOfServiceDifferent} | ${dateOfServiceH} Usługa: ${nameOfService} Adres: ${placeOfAssembly}`)\n            loopIteration++\n            // driver.sleep(5000)\n            await driver.quit()",
              "err": {},
              "uuid": "0fa9240d-c49c-4c9c-8a71-a4245c9dbe64",
              "parentUUID": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add the task: (Kalibracja kotła) to the first client in the clients tab",
              "fullTitle": "Testing add clients, tasks and login to application Add the task: (Kalibracja kotła) to the first client in the clients tab",
              "timedOut": false,
              "duration": 11091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addTaskIteration++\n\nvar driver = new webdriver.Builder()\n    .forBrowser('chrome')\n    .build();\nawait driver.get(`http://localhost:3000/strona_glowna/klienci/${addClientsID[0]}`);\nawait driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[3]/div[2]/button[1]'))).click()\nawait driver.wait(webdriver.until.elementLocated(By.id('nameOfService'))).sendKeys(`${nameOfService}`)\nawait driver.wait(webdriver.until.elementLocated(By.id('placeOfAssembly'))).sendKeys(`${placeOfAssembly}`)\n// driver.sleep(2000)\nawait driver.wait(webdriver.until.elementLocated(By.id('dateOfService'))).sendKeys(`${dateOfService}`)\nawait driver.wait(webdriver.until.elementLocated(By.id('dateOfService'))).sendKeys(webdriver.Key.TAB)\nawait driver.wait(webdriver.until.elementLocated(By.id('dateOfService'))).sendKeys(`${dateOfServiceH}`)\nawait driver.wait(webdriver.until.elementLocated(By.id('DateNextInspection'))).sendKeys(`${DateNextInspection}`)\nawait driver.wait(webdriver.until.elementLocated(By.name('invoice'))).sendKeys(`${absolutePathPdf1}`)\nawait driver.wait(webdriver.until.elementLocated(By.name('invoice'))).sendKeys(`${absolutePathPdf2}`)\nawait driver.wait(webdriver.until.elementLocated(By.name('postWarrantyProtocols'))).sendKeys(`${absolutePathPdf3}`)\nawait driver.wait(webdriver.until.elementLocated(By.className('addTask-button'))).click()\n    \n//czeka aż nastąpi przekierowanie i pojawi się dodany klient\nlet taskExist = await driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[3]/div[4]/div['+count+']/details/summary/div[2]'))).getText().then(function(values){\n    return values\n})\n//id zadań wyświetlanych na stronie internetowej\nvar addedTaskID = []\n//dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\nvar summaryDataTaskID = []\n//pobiera id i dane dodanego uzytkownika ze strony\nfor(var i=0; i<addTaskIteration; i++){\n    var str1 = `return document.querySelectorAll('.id')[${i}].textContent;`\n    addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n        var textContentSplit = textContent.split(' ')\n        return textContentSplit[1]\n    });\n    var str2 = `return document.querySelectorAll('.summary-data')[${i}].outerText;`\n    summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n        var textContentSplit = textContent.split('\\n')\n        return textContentSplit[1]\n    });    \n}\n//zapisuje id dodanego uzytkownika w tabeli w programie\nvar newTaskID = ''\nvar numberAddedTask = 0\nfor(var i=0; i<addedTaskID.length; i++){\n    var inequalityCounter = 0\n    for(var j=0; j<tasksIDAddedToFirstClient.length; j++){\n        if(addedTaskID[i] != tasksIDAddedToFirstClient[j]){\n            inequalityCounter++\n        }\n        if(addedTaskID[i] == tasksIDAddedToFirstClient[j]){\n            break\n        }\n    }\n    if(inequalityCounter == tasksIDAddedToFirstClient.length){\n        newTaskID = addedTaskID[i]\n        numberAddedTask = i\n    }\n}\ntasksIDAddedToFirstClient[addTaskIteration-1] = newTaskID\nvar dateOfServiceDifferent = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\nsummaryDataTaskID[numberAddedTask].should.equal(`${dateOfServiceDifferent} | ${dateOfServiceH} Usługa: ${nameOfService} Adres: ${placeOfAssembly}`)\ncount++\n// driver.sleep(5000)\nawait driver.quit()",
              "err": {},
              "uuid": "a28f7a93-b51c-453c-b044-4e36b7592794",
              "parentUUID": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add the task: (Wymiana kondensatora) to the first client in the clients tab",
              "fullTitle": "Testing add clients, tasks and login to application Add the task: (Wymiana kondensatora) to the first client in the clients tab",
              "timedOut": false,
              "duration": 11118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addTaskIteration++\n\nvar driver = new webdriver.Builder()\n    .forBrowser('chrome')\n    .build();\nawait driver.get(`http://localhost:3000/strona_glowna/klienci/${addClientsID[0]}`);\nawait driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[3]/div[2]/button[1]'))).click()\nawait driver.wait(webdriver.until.elementLocated(By.id('nameOfService'))).sendKeys(`${nameOfService}`)\nawait driver.wait(webdriver.until.elementLocated(By.id('placeOfAssembly'))).sendKeys(`${placeOfAssembly}`)\n// driver.sleep(2000)\nawait driver.wait(webdriver.until.elementLocated(By.id('dateOfService'))).sendKeys(`${dateOfService}`)\nawait driver.wait(webdriver.until.elementLocated(By.id('dateOfService'))).sendKeys(webdriver.Key.TAB)\nawait driver.wait(webdriver.until.elementLocated(By.id('dateOfService'))).sendKeys(`${dateOfServiceH}`)\nawait driver.wait(webdriver.until.elementLocated(By.id('DateNextInspection'))).sendKeys(`${DateNextInspection}`)\nawait driver.wait(webdriver.until.elementLocated(By.name('invoice'))).sendKeys(`${absolutePathPdf1}`)\nawait driver.wait(webdriver.until.elementLocated(By.name('invoice'))).sendKeys(`${absolutePathPdf2}`)\nawait driver.wait(webdriver.until.elementLocated(By.name('postWarrantyProtocols'))).sendKeys(`${absolutePathPdf3}`)\nawait driver.wait(webdriver.until.elementLocated(By.className('addTask-button'))).click()\n    \n//czeka aż nastąpi przekierowanie i pojawi się dodany klient\nlet taskExist = await driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[3]/div[4]/div['+count+']/details/summary/div[2]'))).getText().then(function(values){\n    return values\n})\n//id zadań wyświetlanych na stronie internetowej\nvar addedTaskID = []\n//dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\nvar summaryDataTaskID = []\n//pobiera id i dane dodanego uzytkownika ze strony\nfor(var i=0; i<addTaskIteration; i++){\n    var str1 = `return document.querySelectorAll('.id')[${i}].textContent;`\n    addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n        var textContentSplit = textContent.split(' ')\n        return textContentSplit[1]\n    });\n    var str2 = `return document.querySelectorAll('.summary-data')[${i}].outerText;`\n    summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n        var textContentSplit = textContent.split('\\n')\n        return textContentSplit[1]\n    });    \n}\n//zapisuje id dodanego uzytkownika w tabeli w programie\nvar newTaskID = ''\nvar numberAddedTask = 0\nfor(var i=0; i<addedTaskID.length; i++){\n    var inequalityCounter = 0\n    for(var j=0; j<tasksIDAddedToFirstClient.length; j++){\n        if(addedTaskID[i] != tasksIDAddedToFirstClient[j]){\n            inequalityCounter++\n        }\n        if(addedTaskID[i] == tasksIDAddedToFirstClient[j]){\n            break\n        }\n    }\n    if(inequalityCounter == tasksIDAddedToFirstClient.length){\n        newTaskID = addedTaskID[i]\n        numberAddedTask = i\n    }\n}\ntasksIDAddedToFirstClient[addTaskIteration-1] = newTaskID\nvar dateOfServiceDifferent = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\nsummaryDataTaskID[numberAddedTask].should.equal(`${dateOfServiceDifferent} | ${dateOfServiceH} Usługa: ${nameOfService} Adres: ${placeOfAssembly}`)\ncount++\n// driver.sleep(5000)\nawait driver.quit()",
              "err": {},
              "uuid": "77abb965-b584-49b7-845d-469323b2b3e4",
              "parentUUID": "2f26d6f1-bb28-46e8-a583-cc2cc576838e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1901dea6-9dc3-4edc-b630-d052cd637670",
            "89ff2141-494c-474b-a8b7-39cd71ac0a46",
            "5584a110-52e5-421f-8ba2-97fdbe913b82",
            "0fa9240d-c49c-4c9c-8a71-a4245c9dbe64",
            "a28f7a93-b51c-453c-b044-4e36b7592794",
            "77abb965-b584-49b7-845d-469323b2b3e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 57569,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "874e598a-2109-4101-ad75-3569075aa58a",
          "title": "Testing whether the given sentences appear in the appropriate tabs of the application",
          "fullFile": "C:\\Users\\dawid\\OneDrive\\Desktop\\projekty na gita\\agf-hydra_heroku\\SeleniumADF-Hydra\\test\\automaticTestsAdf-Hydra-1.js",
          "file": "\\test\\automaticTestsAdf-Hydra-1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checking if the tasks added by the user to be done for today are displayed on the home page.",
              "fullTitle": "Testing whether the given sentences appear in the appropriate tabs of the application Checking if the tasks added by the user to be done for today are displayed on the home page.",
              "timedOut": false,
              "duration": 5266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna');\n        \n        //zapisujemy do tablicy allTaskForTodayPlaceInTable taski, które chciał dodać użytkownik z datą wykonania zadania ustawioną na dziś\n        var iterationAllTaskForTodayPlaceInTable = 0\n        var allTaskForTodayPlaceInTable = []\n        var countTaskForTodayAddedByUser = 0\n        var placeInTable = 0\n        clients.forEach(({nameC, lastName, address, phone, nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var dateOfServiceDiffrentEqual = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`          \n            if(new Date(`${dateOfServiceDiffrentEqual}`) == new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)){\n                allTaskForTodayPlaceInTable[iterationAllTaskForTodayPlaceInTable] = `client: ${placeInTable}`\n                iterationAllTaskForTodayPlaceInTable++\n                countTaskForTodayAddedByUser++\n            }\n            placeInTable++\n        })\n        placeInTable = 0\n        tasksForFirstClient.forEach(({nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var dateOfServiceDiffrentEqual = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\n            if(new Date(`${dateOfServiceDiffrentEqual}`) == new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)){\n                allTaskForTodayPlaceInTable[iterationAllTaskForTodayPlaceInTable] = `task: ${placeInTable}`\n                iterationAllTaskForTodayPlaceInTable++\n                countTaskForTodayAddedByUser++\n            }\n            placeInTable++\n        })\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskID = []\n        var numberTasksDisplayedToday = await driver.executeScript(\"return document.querySelectorAll('.taskData').length;\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedToday; i++){\n                \n            var str1 = `var homeData = document.querySelectorAll('.taskData')[${i}]; return homeData.querySelector('label').textContent;`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });\n            var str2 = `return document.querySelectorAll('.summary-data')[${i}].outerText;`\n            summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n                var textContentSplit = textContent.split('\\n')\n                return textContentSplit[1]\n            });    \n        }\n        var countTaskForTodayHomePage = 0\n        //porównujemy taski na dziś, które zostały dodane przez użytkownika z taskami wyświetlanymi na stronie głównej\n        for(var i=0; i<allTaskForTodayPlaceInTable.length; i++){\n            var clientOrTaskTable = allTaskForTodayPlaceInTable[i].split(' ')\n            if(clientOrTaskTable[0] == 'client:'){\n                var numberClientInTable = parseInt(clientOrTaskTable[1])\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == firstAddedTasksID[numberClientInTable]){\n                        var dateOfServiceDifferent = `${clients[numberClientInTable].dateOfService[6]}${clients[numberClientInTable].dateOfService[7]}${clients[numberClientInTable].dateOfService[8]}${clients[numberClientInTable].dateOfService[9]}-${clients[numberClientInTable].dateOfService[3]}${clients[numberClientInTable].dateOfService[4]}-${clients[numberClientInTable].dateOfService[0]}${clients[numberClientInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent}/${clients[numberClientInTable].dateOfServiceH} Klient: ${clients[numberClientInTable].nameC} ${clients[numberClientInTable].lastName} Usługa: ${clients[numberClientInTable].nameOfService} Adres: ${clients[numberClientInTable].placeOfAssembly} Tel.: ${clients[numberClientInTable].phone}`)\n                        countTaskForTodayHomePage++\n                    }\n                }\n            }\n            if(clientOrTaskTable[0] == 'task:'){\n                var numberTaskInTable = (parseInt(clientOrTaskTable[1]))\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == tasksIDAddedToFirstClient[numberTaskInTable+1]){\n                        var dateOfServiceDifferent = `${tasksForFirstClient[numberTaskInTable].dateOfService[6]}${tasksForFirstClient[numberTaskInTable].dateOfService[7]}${tasksForFirstClient[numberTaskInTable].dateOfService[8]}${tasksForFirstClient[numberTaskInTable].dateOfService[9]}-${tasksForFirstClient[numberTaskInTable].dateOfService[3]}${tasksForFirstClient[numberTaskInTable].dateOfService[4]}-${tasksForFirstClient[numberTaskInTable].dateOfService[0]}${tasksForFirstClient[numberTaskInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent}/${tasksForFirstClient[numberTaskInTable].dateOfServiceH} Klient: ${clients[0].nameC} ${clients[0].lastName} Usługa: ${tasksForFirstClient[numberTaskInTable].nameOfService} Adres: ${tasksForFirstClient[numberTaskInTable].placeOfAssembly} Tel.: ${clients[0].phone}`)\n                        countTaskForTodayHomePage++\n                    }\n                }\n            }\n        }\n        //sprawdzenie czy liczba wyświetlanych taksów na stronie internetowej jest równa liczbie taksów dodanych przez użytkownika (czy na stronie wyświetlają się wszystkie taski na dzisiaj)\n        countTaskForTodayAddedByUser.should.equal(countTaskForTodayHomePage)\n        await driver.quit()",
              "err": {},
              "uuid": "7f098596-2ece-4138-8099-64241183089c",
              "parentUUID": "874e598a-2109-4101-ad75-3569075aa58a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking if the tasks added by the user to be performed up to 2 weeks ahead are displayed in the \"Serwis\" tab in the \"Usługi zaplanowane 2 tygodnie do przodu:\" section.",
              "fullTitle": "Testing whether the given sentences appear in the appropriate tabs of the application Checking if the tasks added by the user to be performed up to 2 weeks ahead are displayed in the \"Serwis\" tab in the \"Usługi zaplanowane 2 tygodnie do przodu:\" section.",
              "timedOut": false,
              "duration": 5787,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna/serwis');\n        //zapisujemy do tablicy allTaskForTodayPlaceInTable taski, które chciał dodać użytkownik z datą wykonania zadania ustawioną na dziś\n        var iterationAllTaskForAheadPlaceInTable = 0\n        var allTaskForAheadPlaceInTable = []\n        var countTaskForAheadAddedByUser = 0\n        var placeInTableAhead = 0\n        clients.forEach(({nameC, lastName, address, phone, nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var dateOfServiceDiffrentEqual = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`          \n            if((new Date(`${dateOfServiceDiffrentEqual}`) <= new Date(`${twoWeekahead.getFullYear()}-${twoAMonth}-${twoADay}`)) && (new Date(`${dateOfServiceDiffrentEqual}`) >= (new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)))){\n                if(new Date(`${dateOfServiceDiffrentEqual}`) == (new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)) && new Date(`${dateOfServiceDiffrentEqual} ${dateOfServiceH}`) > new Date(`${today.getFullYear()}-${tMonth}-${tDay} ${tHour}:${tMinutes}`)){\n                    allTaskForAheadPlaceInTable[iterationAllTaskForAheadPlaceInTable] = `client: ${placeInTableAhead}`\n                    iterationAllTaskForAheadPlaceInTable++\n                    countTaskForAheadAddedByUser++\n                }\n                if(new Date(`${dateOfServiceDiffrentEqual}`) > (new Date(`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                    allTaskForAheadPlaceInTable[iterationAllTaskForAheadPlaceInTable] = `client: ${placeInTableAhead}`\n                    iterationAllTaskForAheadPlaceInTable++\n                    countTaskForAheadAddedByUser++\n                }\n            }\n            placeInTableAhead++\n        })\n        placeInTableAhead = 0\n        tasksForFirstClient.forEach(({nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var dateOfServiceDiffrentEqual = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\n            if((new Date(`${dateOfServiceDiffrentEqual}`) <= new Date(`${twoWeekahead.getFullYear()}-${twoAMonth}-${twoADay}`)) && (new Date(`${dateOfServiceDiffrentEqual}`) >= (new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)))){\n                if(new Date(`${dateOfServiceDiffrentEqual}`) == (new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)) && new Date(`${dateOfServiceDiffrentEqual} ${dateOfServiceH}`) > new Date(`${today.getFullYear()}-${tMonth}-${tDay} ${tHour}:${tMinutes}`)){\n                    allTaskForAheadPlaceInTable[iterationAllTaskForAheadPlaceInTable] = `task: ${placeInTableAhead}`\n                    iterationAllTaskForAheadPlaceInTable++\n                    countTaskForAheadAddedByUser++\n                }\n                if(new Date(`${dateOfServiceDiffrentEqual}`) > (new Date(`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                    allTaskForAheadPlaceInTable[iterationAllTaskForAheadPlaceInTable] = `task: ${placeInTableAhead}`\n                    iterationAllTaskForAheadPlaceInTable++\n                    countTaskForAheadAddedByUser++\n                }\n            }\n            placeInTableAhead++\n        })\n        var wait = driver.wait(webdriver.until.elementLocated(By.className(\"summary-data\")))\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskID = []\n        var numberTasksDisplayedAhead = await driver.executeScript(\"return document.querySelector('.twoWeeksAhead').querySelectorAll('.taskDataOne').length\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedAhead; i++){\n            var str1 = `var aheadTaskID = document.querySelector('.twoWeeksAhead'); return aheadTaskID.querySelectorAll('.taskDataOne')[${i}].querySelector('label').textContent`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });\n            var str2 = `var aheadDataSummary = document.querySelector('.twoWeeksAhead'); return aheadDataSummary.querySelectorAll('.summary-data')[${i}].outerText;`\n            summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n                var textContentSplit = textContent.split('\\n')\n                return textContentSplit[1]\n            });    \n        }\n        var countTaskForAheadSerwis = 0\n        //porównujemy taski na dziś, które zostały dodane przez użytkownika z taskami wyświetlanymi na stronie głównej\n        for(var i=0; i<allTaskForAheadPlaceInTable.length; i++){\n            var clientOrTaskTable = allTaskForAheadPlaceInTable[i].split(' ')\n            if(clientOrTaskTable[0] == 'client:'){\n                var numberClientInTable = parseInt(clientOrTaskTable[1])\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == firstAddedTasksID[numberClientInTable]){\n                        var dateOfServiceDifferent = `${clients[numberClientInTable].dateOfService[6]}${clients[numberClientInTable].dateOfService[7]}${clients[numberClientInTable].dateOfService[8]}${clients[numberClientInTable].dateOfService[9]}-${clients[numberClientInTable].dateOfService[3]}${clients[numberClientInTable].dateOfService[4]}-${clients[numberClientInTable].dateOfService[0]}${clients[numberClientInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent}/${clients[numberClientInTable].dateOfServiceH} Klient: ${clients[numberClientInTable].nameC} ${clients[numberClientInTable].lastName} Usługa: ${clients[numberClientInTable].nameOfService} Adres: ${clients[numberClientInTable].placeOfAssembly}`)\n                        countTaskForAheadSerwis++\n                    }\n                }\n            }\n            if(clientOrTaskTable[0] == 'task:'){\n                var numberTaskInTable = (parseInt(clientOrTaskTable[1]))\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == tasksIDAddedToFirstClient[numberTaskInTable+1]){\n                        var dateOfServiceDifferent = `${tasksForFirstClient[numberTaskInTable].dateOfService[6]}${tasksForFirstClient[numberTaskInTable].dateOfService[7]}${tasksForFirstClient[numberTaskInTable].dateOfService[8]}${tasksForFirstClient[numberTaskInTable].dateOfService[9]}-${tasksForFirstClient[numberTaskInTable].dateOfService[3]}${tasksForFirstClient[numberTaskInTable].dateOfService[4]}-${tasksForFirstClient[numberTaskInTable].dateOfService[0]}${tasksForFirstClient[numberTaskInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent}/${tasksForFirstClient[numberTaskInTable].dateOfServiceH} Klient: ${clients[0].nameC} ${clients[0].lastName} Usługa: ${tasksForFirstClient[numberTaskInTable].nameOfService} Adres: ${tasksForFirstClient[numberTaskInTable].placeOfAssembly}`)\n                        countTaskForAheadSerwis++\n                    }\n                }\n            }\n        }\n        //sprawdzenie czy liczba wyświetlanych taksów na stronie internetowej jest równa liczbie taksów dodanych przez użytkownika (czy na stronie wyświetlają się wszystkie taski na dzisiaj)\n        countTaskForAheadAddedByUser.should.equal(countTaskForAheadSerwis)\n        await driver.quit()",
              "err": {},
              "uuid": "a8c3c985-f79a-47bb-9927-f5f64fdd7548",
              "parentUUID": "874e598a-2109-4101-ad75-3569075aa58a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking if the tasks added by the user to be performed up to 2 weeks behind are displayed in the \"Serwis\" tab in the \"Usługi wykonane 2 tygodnie do tyłu:\" section.",
              "fullTitle": "Testing whether the given sentences appear in the appropriate tabs of the application Checking if the tasks added by the user to be performed up to 2 weeks behind are displayed in the \"Serwis\" tab in the \"Usługi wykonane 2 tygodnie do tyłu:\" section.",
              "timedOut": false,
              "duration": 8899,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna/serwis');\n        //zapisujemy do tablicy allTaskForTodayPlaceInTable taski, które chciał dodać użytkownik z datą wykonania zadania ustawioną na dziś\n        var iterationAllTaskForBehindPlaceInTable = 0\n        var allTaskForBehindPlaceInTable = []\n        var countTaskForBehindAddedByUser = 0\n        var placeInTableBehind = 0\n        clients.forEach(({nameC, lastName, address, phone, nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var dateOfServiceDiffrentEqual = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\n            if((new Date(`${dateOfServiceDiffrentEqual}`) >= new Date(`${twoWeekbehind.getFullYear()}-${twoBMonth}-${twoBDay}`)) && (dateOfServiceDiffrentEqual <= new Date(`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                if(new Date(`${dateOfServiceDiffrentEqual}`) == new Date(`${today.getFullYear()}-${tMonth}-${tDay}`) && new Date(`${dateOfServiceDiffrentEqual} ${dateOfServiceH}`) < new Date(`${today.getFullYear()}-${tMonth}-${tDay} ${tHour}:${tMinutes}`)){\n                    allTaskForBehindPlaceInTable[iterationAllTaskForBehindPlaceInTable] = `client: ${placeInTableBehind}`\n                    iterationAllTaskForBehindPlaceInTable++\n                    countTaskForBehindAddedByUser++\n                }\n                if(new Date(`${dateOfServiceDiffrentEqual}`) < new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)){\n                    allTaskForBehindPlaceInTable[iterationAllTaskForBehindPlaceInTable] = `client: ${placeInTableBehind}`\n                    iterationAllTaskForBehindPlaceInTable++\n                    countTaskForBehindAddedByUser++\n                }\n            }\n            placeInTableBehind++\n        })\n        placeInTableBehind = 0\n        tasksForFirstClient.forEach(({nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var dateOfServiceDiffrentEqual = `${dateOfService[6]}${dateOfService[7]}${dateOfService[8]}${dateOfService[9]}-${dateOfService[3]}${dateOfService[4]}-${dateOfService[0]}${dateOfService[1]}`\n            if((new Date(`${dateOfServiceDiffrentEqual}`) >= new Date(`${twoWeekbehind.getFullYear()}-${twoBMonth}-${twoBDay}`)) && (dateOfServiceDiffrentEqual <= new Date(`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                if(new Date(`${dateOfServiceDiffrentEqual}`) == new Date(`${today.getFullYear()}-${tMonth}-${tDay}`) && new Date(`${dateOfServiceDiffrentEqual} ${dateOfServiceH}`) < new Date(`${today.getFullYear()}-${tMonth}-${tDay} ${tHour}:${tMinutes}`)){\n                    allTaskForBehindPlaceInTable[iterationAllTaskForBehindPlaceInTable] = `task: ${placeInTableBehind}`\n                    iterationAllTaskForBehindPlaceInTable++\n                    countTaskForBehindAddedByUser++\n                }\n                if(new Date(`${dateOfServiceDiffrentEqual}`) < new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)){\n                    allTaskForBehindPlaceInTable[iterationAllTaskForBehindPlaceInTable] = `task: ${placeInTableBehind}`\n                    iterationAllTaskForBehindPlaceInTable++\n                    countTaskForBehindAddedByUser++\n                }\n            }\n            placeInTableBehind++\n        })\n        var wait = driver.wait(webdriver.until.elementLocated(By.className(\"summary-data\")))\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskID = []\n        var numberTasksDisplayedBehind = await driver.executeScript(\"return document.querySelector('.twoWeeksBack').querySelectorAll('.taskDataOne').length\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedBehind; i++){\n            var str1 = `var behindTaskID = document.querySelector('.twoWeeksBack'); return behindTaskID.querySelectorAll('.taskDataOne')[${i}].querySelector('label').textContent`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });\n            var str2 = `var behindDataSummary = document.querySelector('.twoWeeksBack'); return behindDataSummary.querySelectorAll('.summary-data')[${i}].outerText;`\n            summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n                var textContentSplit = textContent.split('\\n')\n                return textContentSplit[1]\n            });    \n        }\n        var countTaskForBehindSerwis = 0\n        //porównujemy taski na dziś, które zostały dodane przez użytkownika z taskami wyświetlanymi na stronie głównej\n        for(var i=0; i<allTaskForBehindPlaceInTable.length; i++){\n            var clientOrTaskTable = allTaskForBehindPlaceInTable[i].split(' ')\n            if(clientOrTaskTable[0] == 'client:'){\n                var numberClientInTable = parseInt(clientOrTaskTable[1])\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == firstAddedTasksID[numberClientInTable]){\n                        var dateOfServiceDifferent = `${clients[numberClientInTable].dateOfService[6]}${clients[numberClientInTable].dateOfService[7]}${clients[numberClientInTable].dateOfService[8]}${clients[numberClientInTable].dateOfService[9]}-${clients[numberClientInTable].dateOfService[3]}${clients[numberClientInTable].dateOfService[4]}-${clients[numberClientInTable].dateOfService[0]}${clients[numberClientInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent}/${clients[numberClientInTable].dateOfServiceH} Klient: ${clients[numberClientInTable].nameC} ${clients[numberClientInTable].lastName} Usługa: ${clients[numberClientInTable].nameOfService} Adres: ${clients[numberClientInTable].placeOfAssembly}`)\n                        countTaskForBehindSerwis++\n                    }\n                }\n            }\n            if(clientOrTaskTable[0] == 'task:'){\n                var numberTaskInTable = (parseInt(clientOrTaskTable[1]))\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == tasksIDAddedToFirstClient[numberTaskInTable+1]){\n                        var dateOfServiceDifferent = `${tasksForFirstClient[numberTaskInTable].dateOfService[6]}${tasksForFirstClient[numberTaskInTable].dateOfService[7]}${tasksForFirstClient[numberTaskInTable].dateOfService[8]}${tasksForFirstClient[numberTaskInTable].dateOfService[9]}-${tasksForFirstClient[numberTaskInTable].dateOfService[3]}${tasksForFirstClient[numberTaskInTable].dateOfService[4]}-${tasksForFirstClient[numberTaskInTable].dateOfService[0]}${tasksForFirstClient[numberTaskInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent}/${tasksForFirstClient[numberTaskInTable].dateOfServiceH} Klient: ${clients[0].nameC} ${clients[0].lastName} Usługa: ${tasksForFirstClient[numberTaskInTable].nameOfService} Adres: ${tasksForFirstClient[numberTaskInTable].placeOfAssembly}`)\n                        countTaskForBehindSerwis++\n                    }\n                }\n            }\n        }\n        //sprawdzenie czy liczba wyświetlanych taksów na stronie internetowej jest równa liczbie taksów dodanych przez użytkownika (czy na stronie wyświetlają się wszystkie taski na dzisiaj)\n        countTaskForBehindAddedByUser.should.equal(countTaskForBehindSerwis)\n        // driver.sleep(5000)\n        await driver.quit()",
              "err": {},
              "uuid": "dce30564-ccd6-4abf-8a52-79b89f72f24d",
              "parentUUID": "874e598a-2109-4101-ad75-3569075aa58a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking if the tasks added by the user to be performed up to 2 weeks ahead inspection are displayed in the \"Serwis\" tab in the \"Powiadomienia o następnym przeglądzie/wykonaniu telefonu 2 tygodnie do przodu:\" section.",
              "fullTitle": "Testing whether the given sentences appear in the appropriate tabs of the application Checking if the tasks added by the user to be performed up to 2 weeks ahead inspection are displayed in the \"Serwis\" tab in the \"Powiadomienia o następnym przeglądzie/wykonaniu telefonu 2 tygodnie do przodu:\" section.",
              "timedOut": false,
              "duration": 6969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna/serwis');\n        //zapisujemy do tablicy allTaskForTodayPlaceInTable taski, które chciał dodać użytkownik z datą wykonania zadania ustawioną na dziś\n        var iterationAllTaskForAheadNotificationPlaceInTable = 0\n        var allTaskForAheadNotificationPlaceInTable = []\n        var countTaskForAheadNotificationAddedByUser = 0\n        var placeInTableAheadNotification = 0\n        clients.forEach(({nameC, lastName, address, phone, nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var DateNextInspectionDiffrentEqual = `${DateNextInspection[6]}${DateNextInspection[7]}${DateNextInspection[8]}${DateNextInspection[9]}-${DateNextInspection[3]}${DateNextInspection[4]}-${DateNextInspection[0]}${DateNextInspection[1]}`\n            if((new Date(`${DateNextInspectionDiffrentEqual}`) <= new Date(`${twoWeekahead.getFullYear()}-${twoAMonth}-${twoADay}`)) && (new Date(`${DateNextInspectionDiffrentEqual}` >= new Date(`${today.getFullYear()}-${tMonth}-${tDay}`)))){\n                allTaskForAheadNotificationPlaceInTable[iterationAllTaskForAheadNotificationPlaceInTable] = `client: ${placeInTableAheadNotification}`\n                iterationAllTaskForAheadNotificationPlaceInTable++\n                countTaskForAheadNotificationAddedByUser++\n            }\n            placeInTableAheadNotification++\n        })\n        placeInTableAheadNotification = 0\n        tasksForFirstClient.forEach(({nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var DateNextInspectionDiffrentEqual = `${DateNextInspection[6]}${DateNextInspection[7]}${DateNextInspection[8]}${DateNextInspection[9]}-${DateNextInspection[3]}${DateNextInspection[4]}-${DateNextInspection[0]}${DateNextInspection[1]}`\n            if((DateNextInspectionDiffrentEqual <= `${twoWeekahead.getFullYear()}-${twoAMonth}-${twoADay}`) && (DateNextInspectionDiffrentEqual >= (`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                \n                allTaskForAheadNotificationPlaceInTable[iterationAllTaskForAheadNotificationPlaceInTable] = `task: ${placeInTableAheadNotification}`\n                iterationAllTaskForAheadNotificationPlaceInTable++\n                countTaskForAheadNotificationAddedByUser++\n            }\n            placeInTableAheadNotification++\n        })\n        var wait = driver.wait(webdriver.until.elementLocated(By.className(\"summary-data\")))\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskID = []\n        var numberTasksDisplayedAheadNotification = await driver.executeScript(\"return document.querySelector('.twoWeeksInsp').querySelectorAll('.taskDataOne').length\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedAheadNotification; i++){\n            var str1 = `var aheadNotificationTaskID = document.querySelector('.twoWeeksInsp'); return aheadNotificationTaskID.querySelectorAll('.taskDataOne')[${i}].querySelector('label').textContent`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });\n            var str2 = `var aheadNotificationDataSummary = document.querySelector('.twoWeeksInsp'); return aheadNotificationDataSummary.querySelectorAll('.summary-data')[${i}].outerText;`\n            summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n                var textContentSplit = textContent.split('\\n')\n                var textContentSplitHour = textContentSplit[1].split('|')\n                return textContentSplitHour[0].trim()\n            });    \n        }\n        var countTaskForAheadNotificationSerwis = 0\n        //porównujemy taski na dziś, które zostały dodane przez użytkownika z taskami wyświetlanymi na stronie głównej\n        for(var i=0; i<allTaskForAheadNotificationPlaceInTable.length; i++){\n            var clientOrTaskTable = allTaskForAheadNotificationPlaceInTable[i].split(' ')\n            if(clientOrTaskTable[0] == 'client:'){\n                var numberClientInTable = parseInt(clientOrTaskTable[1])\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == firstAddedTasksID[numberClientInTable]){\n                        var DateNextInspectionDifferent = `${clients[numberClientInTable].DateNextInspection[6]}${clients[numberClientInTable].DateNextInspection[7]}${clients[numberClientInTable].DateNextInspection[8]}${clients[numberClientInTable].DateNextInspection[9]}-${clients[numberClientInTable].DateNextInspection[3]}${clients[numberClientInTable].DateNextInspection[4]}-${clients[numberClientInTable].DateNextInspection[0]}${clients[numberClientInTable].DateNextInspection[1]}`\n                        summaryDataTaskID[j].should.equal(`${DateNextInspectionDifferent} Klient: ${clients[numberClientInTable].nameC} ${clients[numberClientInTable].lastName} Usługa: ${clients[numberClientInTable].nameOfService} Telefon: ${clients[numberClientInTable].phone}`)\n                        countTaskForAheadNotificationSerwis++\n                    }\n                }\n            }\n            if(clientOrTaskTable[0] == 'task:'){\n                var numberTaskInTable = (parseInt(clientOrTaskTable[1]))\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == tasksIDAddedToFirstClient[numberTaskInTable+1]){\n                        var DateNextInspectionDifferent = `${tasksForFirstClient[numberTaskInTable].DateNextInspection[6]}${tasksForFirstClient[numberTaskInTable].DateNextInspection[7]}${tasksForFirstClient[numberTaskInTable].DateNextInspection[8]}${tasksForFirstClient[numberTaskInTable].DateNextInspection[9]}-${tasksForFirstClient[numberTaskInTable].DateNextInspection[3]}${tasksForFirstClient[numberTaskInTable].DateNextInspection[4]}-${tasksForFirstClient[numberTaskInTable].DateNextInspection[0]}${tasksForFirstClient[numberTaskInTable].DateNextInspection[1]}`\n                        summaryDataTaskID[j].should.equal(`${DateNextInspectionDifferent} Klient: ${clients[0].nameC} ${clients[0].lastName} Usługa: ${tasksForFirstClient[numberTaskInTable].nameOfService} Telefon: ${clients[0].phone}`)\n                        countTaskForAheadNotificationSerwis++\n                    }\n                }\n            }\n        }\n        // sprawdzenie czy liczba wyświetlanych taksów na stronie internetowej jest równa liczbie taksów dodanych przez użytkownika (czy na stronie wyświetlają się wszystkie taski na dzisiaj)\n        countTaskForAheadNotificationAddedByUser.should.equal(countTaskForAheadNotificationSerwis)\n        await driver.quit()",
              "err": {},
              "uuid": "a8ee8c64-05ea-40a7-bb8c-b506ea402d7e",
              "parentUUID": "874e598a-2109-4101-ad75-3569075aa58a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking whether all tasks added by the user are displayed in the \"Serwis/Wypisz wszystkie usługi\" tab.",
              "fullTitle": "Testing whether the given sentences appear in the appropriate tabs of the application Checking whether all tasks added by the user are displayed in the \"Serwis/Wypisz wszystkie usługi\" tab.",
              "timedOut": false,
              "duration": 7896,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna/serwis/wszystkie_uslugi');\n        //zapisujemy do tablicy allTaskForTodayPlaceInTable taski, które chciał dodać użytkownik z datą wykonania zadania ustawioną na dziś\n        var iterationAllTaskForAllTasks = 0\n        var allTaskForAllTasksTable = []\n        var countTasks = 0\n        clients.forEach(({nameC, lastName, address, phone, nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            allTaskForAllTasksTable[iterationAllTaskForAllTasks] = `client: ${countTasks}`\n            iterationAllTaskForAllTasks++\n            countTasks++\n        })\n        countTasks = 0\n        tasksForFirstClient.forEach(({nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            allTaskForAllTasksTable[iterationAllTaskForAllTasks] = `task: ${countTasks}`\n            iterationAllTaskForAllTasks++\n            countTasks++\n        })\n        var wait = driver.wait(webdriver.until.elementLocated(By.className(\"summary-data\")))\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskID = []\n        var numberTasksDisplayedInAllTasks = await driver.executeScript(\"return document.querySelector('.tasks-details-all').querySelectorAll('.task').length\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedInAllTasks; i++){\n            var str1 = `var allTasksTaskID = document.querySelector('.tasks-details-all'); return allTasksTaskID.querySelectorAll('.task-data1')[${i}].querySelector('label').textContent`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });\n            var str2 = `var allTasksDataSummary = document.querySelector('.tasks-details-all'); return allTasksDataSummary.querySelectorAll('.summary-data')[${i}].outerText;`\n            summaryDataTaskID[i] = await driver.executeScript(str2).then(function(textContent) {\n                var textContentSplit = textContent.split('\\n')\n                return textContentSplit[1]\n            });    \n        }\n        var countTaskForAllTasks = 0\n        //porównujemy taski na dziś, które zostały dodane przez użytkownika z taskami wyświetlanymi na stronie głównej\n        for(var i=0; i<allTaskForAllTasksTable.length; i++){\n            var clientOrTaskTable = allTaskForAllTasksTable[i].split(' ')\n            if(clientOrTaskTable[0] == 'client:'){\n                var numberClientInTable = parseInt(clientOrTaskTable[1])\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == firstAddedTasksID[numberClientInTable]){\n                        var dateOfServiceDifferent = `${clients[numberClientInTable].dateOfService[6]}${clients[numberClientInTable].dateOfService[7]}${clients[numberClientInTable].dateOfService[8]}${clients[numberClientInTable].dateOfService[9]}-${clients[numberClientInTable].dateOfService[3]}${clients[numberClientInTable].dateOfService[4]}-${clients[numberClientInTable].dateOfService[0]}${clients[numberClientInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent} | ${clients[numberClientInTable].dateOfServiceH} Klient: ${clients[numberClientInTable].nameC} ${clients[numberClientInTable].lastName} Usługa: ${clients[numberClientInTable].nameOfService} Adres: ${clients[numberClientInTable].placeOfAssembly}`)\n                        countTaskForAllTasks++\n                    }\n                }\n            }\n            if(clientOrTaskTable[0] == 'task:'){\n                var numberTaskInTable = (parseInt(clientOrTaskTable[1]))\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == tasksIDAddedToFirstClient[numberTaskInTable+1]){\n                        var dateOfServiceDifferent = `${tasksForFirstClient[numberTaskInTable].dateOfService[6]}${tasksForFirstClient[numberTaskInTable].dateOfService[7]}${tasksForFirstClient[numberTaskInTable].dateOfService[8]}${tasksForFirstClient[numberTaskInTable].dateOfService[9]}-${tasksForFirstClient[numberTaskInTable].dateOfService[3]}${tasksForFirstClient[numberTaskInTable].dateOfService[4]}-${tasksForFirstClient[numberTaskInTable].dateOfService[0]}${tasksForFirstClient[numberTaskInTable].dateOfService[1]}`\n                        summaryDataTaskID[j].should.equal(`${dateOfServiceDifferent} | ${tasksForFirstClient[numberTaskInTable].dateOfServiceH} Klient: ${clients[0].nameC} ${clients[0].lastName} Usługa: ${tasksForFirstClient[numberTaskInTable].nameOfService} Adres: ${tasksForFirstClient[numberTaskInTable].placeOfAssembly}`)\n                        countTaskForAllTasks++\n                    }\n                }\n            }\n        }\n        //sprawdzenie czy liczba wyświetlanych taksów na stronie internetowej jest równa liczbie taksów dodanych przez użytkownika (czy na stronie wyświetlają się wszystkie taski na dzisiaj)\n        iterationAllTaskForAllTasks.should.equal(countTaskForAllTasks)\n        await driver.quit()",
              "err": {},
              "uuid": "1caaa1af-6b16-44f3-9a4f-b15cec031488",
              "parentUUID": "874e598a-2109-4101-ad75-3569075aa58a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f098596-2ece-4138-8099-64241183089c",
            "a8c3c985-f79a-47bb-9927-f5f64fdd7548",
            "dce30564-ccd6-4abf-8a52-79b89f72f24d",
            "a8ee8c64-05ea-40a7-bb8c-b506ea402d7e",
            "1caaa1af-6b16-44f3-9a4f-b15cec031488"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34817,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "bc0b1b82-eec1-4b07-beca-2c108eeea6f9",
          "title": "Testing the functionality of the application",
          "fullFile": "C:\\Users\\dawid\\OneDrive\\Desktop\\projekty na gita\\agf-hydra_heroku\\SeleniumADF-Hydra\\test\\automaticTestsAdf-Hydra-1.js",
          "file": "\\test\\automaticTestsAdf-Hydra-1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "In task tab notification 2 weeks ahead, if the task is due today and \"Zadzwoniłeś\" is set to \"Nie\" then the task is red",
              "fullTitle": "Testing the functionality of the application In task tab notification 2 weeks ahead, if the task is due today and \"Zadzwoniłeś\" is set to \"Nie\" then the task is red",
              "timedOut": false,
              "duration": 5955,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna/serwis');\n        //zapisujemy do tablicy allTaskForTodayPlaceInTable taski, które chciał dodać użytkownik z datą wykonania zadania ustawioną na dziś\n        var iterationAllTaskForAheadNotificationPlaceInTableFn = 0\n        var allTaskForAheadNotificationPlaceInTableFn = []\n        var countTaskForAheadNotificationAddedByUserFn = 0\n        var placeInTableAheadNotificationFn = 0\n        clients.forEach(({nameC, lastName, address, phone, nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var DateNextInspectionDiffrentEqual = `${DateNextInspection[6]}${DateNextInspection[7]}${DateNextInspection[8]}${DateNextInspection[9]}-${DateNextInspection[3]}${DateNextInspection[4]}-${DateNextInspection[0]}${DateNextInspection[1]}`\n            if((new Date(`${DateNextInspectionDiffrentEqual}`) == new Date(`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                allTaskForAheadNotificationPlaceInTableFn[iterationAllTaskForAheadNotificationPlaceInTableFn] = `client: ${placeInTableAheadNotificationFn}`\n                iterationAllTaskForAheadNotificationPlaceInTableFn++\n                countTaskForAheadNotificationAddedByUserFn++\n            }\n            placeInTableAheadNotificationFn++\n        })\n        placeInTableAheadNotificationFn = 0\n        tasksForFirstClient.forEach(({nameOfService, placeOfAssembly, dateOfService, dateOfServiceH, DateNextInspection})=>{\n            var DateNextInspectionDiffrentEqual = `${DateNextInspection[6]}${DateNextInspection[7]}${DateNextInspection[8]}${DateNextInspection[9]}-${DateNextInspection[3]}${DateNextInspection[4]}-${DateNextInspection[0]}${DateNextInspection[1]}`\n            if((new Date(`${DateNextInspectionDiffrentEqual}`) == new Date(`${today.getFullYear()}-${tMonth}-${tDay}`))){\n                \n                allTaskForAheadNotificationPlaceInTableFn[iterationAllTaskForAheadNotificationPlaceInTableFn] = `task: ${placeInTableAheadNotificationFn}`\n                iterationAllTaskForAheadNotificationPlaceInTableFn++\n                countTaskForAheadNotificationAddedByUserFn++\n            }\n            placeInTableAheadNotificationFn++\n        })\n        var wait = driver.wait(webdriver.until.elementLocated(By.className(\"summary-data\")))\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskBackground = []\n        var numberTasksDisplayedAheadNotificationFn = await driver.executeScript(\"return document.querySelector('.twoWeeksInsp').querySelectorAll('summary').length\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedAheadNotificationFn; i++){\n            var str1 = `var aheadNotificationTaskIDFn = document.querySelector('.twoWeeksInsp'); return aheadNotificationTaskIDFn.querySelectorAll('.taskDataOne')[${i}].querySelector('label').textContent`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });\n            var str2 = `var aheadNotificationSummaryBackground = document.querySelector('.twoWeeksInsp'); return aheadNotificationSummaryBackground.querySelectorAll('summary')[${i}].style.background;`\n            summaryDataTaskBackground[i] = await driver.executeScript(str2).then(function(textContent) {\n                return textContent\n            });    \n        }\n        var countTaskForAheadNotificationSerwisFn = 0\n        //porównujemy taski na dziś, które zostały dodane przez użytkownika z taskami wyświetlanymi na stronie głównej\n        for(var i=0; i<allTaskForAheadNotificationPlaceInTableFn.length; i++){\n            var clientOrTaskTable = allTaskForAheadNotificationPlaceInTableFn[i].split(' ')\n            if(clientOrTaskTable[0] == 'client:'){\n                var numberClientInTable = parseInt(clientOrTaskTable[1])\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == firstAddedTasksID[numberClientInTable]){\n                        summaryDataTaskBackground[j].should.equal('red')\n                        countTaskForAheadNotificationSerwisFn++\n                    }\n                }\n            }\n            if(clientOrTaskTable[0] == 'task:'){\n                var numberTaskInTable = (parseInt(clientOrTaskTable[1]))\n                for(var j=0; j<addedTaskID.length; j++){\n                    if(addedTaskID[j] == tasksIDAddedToFirstClient[numberTaskInTable+1]){\n                        summaryDataTaskBackground[j].should.equal('red')\n                        countTaskForAheadNotificationSerwisFn++\n                    }\n                }\n            }\n        }\n        // sprawdzenie czy liczba wyświetlanych taksów na stronie internetowej jest równa liczbie tasków dodanych przez użytkownika (czy na stronie wyświetlają się wszystkie taski na dzisiaj)\n        countTaskForAheadNotificationAddedByUserFn.should.equal(countTaskForAheadNotificationSerwisFn)\n        // driver.sleep(5000)\n        await driver.quit()",
              "err": {},
              "uuid": "d299bc6c-84c5-4969-98ee-317b719e8b58",
              "parentUUID": "bc0b1b82-eec1-4b07-beca-2c108eeea6f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking the operation of the search engine in the \"Wszystkie usługi\" tab",
              "fullTitle": "Testing the functionality of the application Checking the operation of the search engine in the \"Wszystkie usługi\" tab",
              "timedOut": false,
              "duration": 6861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n        await driver.get('http://localhost:3000/strona_glowna/serwis/wszystkie_uslugi');\n        await driver.wait(webdriver.until.elementLocated(By.id('search_input'))).sendKeys(`${clients[0].nameC} ${clients[0].lastName}`)\n        var wait = await driver.wait(webdriver.until.elementLocated(By.className(\"summary-data\")))\n        //dane zadań wyświetlanych na stronie internetowej, pierwsze id z tablicy addedTaskID odpowiada pierwszemu elementowi z tablicy summaryDataTaskID z danymi zadania, czyli pod indekasmi 0 sa powiązne ze sobą id zadania i dane zadania dodanych do pierwszego klienta\n        var summaryDataTaskID = []\n        var numberTasksDisplayed = await driver.executeScript(\"return document.querySelector('.tasks-details-all').querySelectorAll('.task').length\")\n        var countBlock = 0\n        for(var i=0; i<numberTasksDisplayed; i++){\n            var strBlock = `return document.querySelector('.tasks-details-all').querySelectorAll('.task')[${i}].style.display;`\n            var blockElement = await driver.executeScript(strBlock)\n            if(blockElement == 'block'){\n                countBlock++\n            }\n        }\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayed; i++){\n            var str1 = `var behindDataSummary = document.querySelector('.tasks-details-all'); return behindDataSummary.querySelectorAll('.summary-data')[${i}].outerText;`\n            summaryDataTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split('\\n')\n                return textContentSplit[1]\n            });    \n        }\n        var countInclude = 0\n        for(var i=0; i<numberTasksDisplayed; i++){\n            if(summaryDataTaskID[i].includes(`${clients[0].nameC} ${clients[0].lastName}`)){\n                countInclude++\n            }\n        }\n        countBlock.should.equal(countInclude)\n        await driver.quit()",
              "err": {},
              "uuid": "e77c9ebd-d7a3-45ab-8887-9a67c3a47bef",
              "parentUUID": "bc0b1b82-eec1-4b07-beca-2c108eeea6f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d299bc6c-84c5-4969-98ee-317b719e8b58",
            "e77c9ebd-d7a3-45ab-8887-9a67c3a47bef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12816,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "aff83d2e-4143-4388-8871-a3ab4db6e037",
          "title": "Testing the client and task delete function",
          "fullFile": "C:\\Users\\dawid\\OneDrive\\Desktop\\projekty na gita\\agf-hydra_heroku\\SeleniumADF-Hydra\\test\\automaticTestsAdf-Hydra-1.js",
          "file": "\\test\\automaticTestsAdf-Hydra-1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check the action of deleting the last added task from the first client.",
              "fullTitle": "Testing the client and task delete function Check the action of deleting the last added task from the first client.",
              "timedOut": false,
              "duration": 8809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n                \n        var lastTaskID = (tasksIDAddedToFirstClient.length-1)\n        var getLastTaskID = tasksIDAddedToFirstClient[lastTaskID]\n        await driver.get(`http://localhost:3000/strona_glowna/klienci/${addClientsID[0]}/${getLastTaskID}/usun_usluge`);\n        await driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[2]/div/div/form/button'))).click()\n        var wait = await driver.wait(webdriver.until.elementLocated(By.className(\"longTasks\")))\n        //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n        //id zadań wyświetlanych na stronie internetowej\n        var addedTaskID = []\n        var numberTasksDisplayedClient = await driver.executeScript(\"return document.querySelectorAll('.task').length\")\n        //pobiera id i dane dodanego uzytkownika ze strony\n        for(var i=0; i<numberTasksDisplayedClient; i++){\n            var str1 = `var taskIDInClient = document.querySelector('.tasks-details'); return taskIDInClient.querySelectorAll('.longTasks')[${i}].querySelector('label').textContent`\n            addedTaskID[i] = await driver.executeScript(str1).then(function(textContent) {\n                var textContentSplit = textContent.split(' ')\n                return textContentSplit[1]\n            });   \n        }\n        var deleteTaskExist = 0\n        for(var i=0; i<addedTaskID.length; i++){\n            if(addedTaskID[i] == getLastTaskID){\n                deleteTaskExist++\n            }\n        }\n        deleteTaskExist.should.equal(0)\n            \n        // await driver.sleep(5000)\n        await driver.quit()",
              "err": {},
              "uuid": "f44f881a-847f-4dc8-bef0-0d7cb85a66a1",
              "parentUUID": "aff83d2e-4143-4388-8871-a3ab4db6e037",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check deletion of all clients, deleted client number: 1. Monika Papiez",
              "fullTitle": "Testing the client and task delete function Check deletion of all clients, deleted client number: 1. Monika Papiez",
              "timedOut": false,
              "duration": 7139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n                .forBrowser('chrome')\n                .build();\n                \n            await driver.get(`http://localhost:3000/strona_glowna/klienci/${addClientsID[coutClientC]}/usun_klienta`);\n            \n            await driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[2]/div/div/button[1]'))).click()\n            var wait = await driver.wait(webdriver.until.elementLocated(By.className(\"clients\")))\n            //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n            //id zadań wyświetlanych na stronie internetowej\n            var summaryDataClient = []\n            var numberClientDisplayed = await driver.executeScript(\"return document.querySelectorAll('.client').length\")\n            //pobiera id i dane dodanego uzytkownika ze strony\n            for(var j=0; j<numberClientDisplayed; j++){\n                var str1 = `var clientDataSummary = document.querySelector('.clients'); return clientDataSummary.querySelectorAll('.summary-data')[${j}].outerText;`\n                summaryDataClient[j] = await driver.executeScript(str1).then(function(textContent) {\n                    var textContentSplit = textContent.split('\\n')\n                    return textContentSplit[1]\n                });  \n            }\n            var deleteClientExist = 0\n            for(var j=0; j<summaryDataClient.length; j++){\n                if(summaryDataClient[j] == `Imię: ${nameC} Nazwisko: ${lastName} Adres: ${address}`){\n                    deleteClientExist++\n                }\n            }\n            //sprawdzenie czy klient zostal usuniety\n            deleteClientExist.should.equal(0)\n            coutClientC++\n            // await driver.sleep(5000)\n            await driver.quit()",
              "err": {},
              "uuid": "00a3688e-e84e-4b2d-a796-91861da925f2",
              "parentUUID": "aff83d2e-4143-4388-8871-a3ab4db6e037",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check deletion of all clients, deleted client number: 2. Adam Marzec",
              "fullTitle": "Testing the client and task delete function Check deletion of all clients, deleted client number: 2. Adam Marzec",
              "timedOut": false,
              "duration": 7645,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n                .forBrowser('chrome')\n                .build();\n                \n            await driver.get(`http://localhost:3000/strona_glowna/klienci/${addClientsID[coutClientC]}/usun_klienta`);\n            \n            await driver.wait(webdriver.until.elementLocated(By.xpath('/html/body/div[2]/div/div/button[1]'))).click()\n            var wait = await driver.wait(webdriver.until.elementLocated(By.className(\"clients\")))\n            //zapisujemy wszystkie taski, które znajdują się na stronie głównej do tablicy, (id taska do tablicy addedTaskID), (dane taska do tablicy summaryDataTaskID)\n            //id zadań wyświetlanych na stronie internetowej\n            var summaryDataClient = []\n            var numberClientDisplayed = await driver.executeScript(\"return document.querySelectorAll('.client').length\")\n            //pobiera id i dane dodanego uzytkownika ze strony\n            for(var j=0; j<numberClientDisplayed; j++){\n                var str1 = `var clientDataSummary = document.querySelector('.clients'); return clientDataSummary.querySelectorAll('.summary-data')[${j}].outerText;`\n                summaryDataClient[j] = await driver.executeScript(str1).then(function(textContent) {\n                    var textContentSplit = textContent.split('\\n')\n                    return textContentSplit[1]\n                });  \n            }\n            var deleteClientExist = 0\n            for(var j=0; j<summaryDataClient.length; j++){\n                if(summaryDataClient[j] == `Imię: ${nameC} Nazwisko: ${lastName} Adres: ${address}`){\n                    deleteClientExist++\n                }\n            }\n            //sprawdzenie czy klient zostal usuniety\n            deleteClientExist.should.equal(0)\n            coutClientC++\n            // await driver.sleep(5000)\n            await driver.quit()",
              "err": {},
              "uuid": "c9fa2388-80fc-4177-8dab-33f025897e3b",
              "parentUUID": "aff83d2e-4143-4388-8871-a3ab4db6e037",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f44f881a-847f-4dc8-bef0-0d7cb85a66a1",
            "00a3688e-e84e-4b2d-a796-91861da925f2",
            "c9fa2388-80fc-4177-8dab-33f025897e3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23593,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "07afa1d9-46e8-4541-a1e3-875be1c37592",
          "title": "Testing logout from application",
          "fullFile": "C:\\Users\\dawid\\OneDrive\\Desktop\\projekty na gita\\agf-hydra_heroku\\SeleniumADF-Hydra\\test\\automaticTestsAdf-Hydra-1.js",
          "file": "\\test\\automaticTestsAdf-Hydra-1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check logout from application",
              "fullTitle": "Testing logout from application Check logout from application",
              "timedOut": false,
              "duration": 6195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var driver = new webdriver.Builder()\n            .forBrowser('chrome')\n            .build();\n                \n        await driver.get('http://localhost:3000/strona_glowna');\n            \n        await driver.wait(webdriver.until.elementLocated(By.xpath('//*[@id=\"container\"]/nav/div/div/ul/div/li[2]/button'))).click()\n        await driver.wait(webdriver.until.elementLocated(By.id('login')))\n        \n        var tekst = await driver.executeScript(\"return document.querySelector('h2').outerText;\")\n        tekst.should.equal('Logowanie')\n        await driver.quit()",
              "err": {},
              "uuid": "b4ee0ff0-62f5-4508-ac20-4e69dcb242ba",
              "parentUUID": "07afa1d9-46e8-4541-a1e3-875be1c37592",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4ee0ff0-62f5-4508-ac20-4e69dcb242ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6195,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "testRaport"
      },
      "version": "6.2.0"
    }
  }
}